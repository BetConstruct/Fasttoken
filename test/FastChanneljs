
const FastChannel = artifacts.require("FastChannel");
const Fasttoken = artifacts.require("Fasttoken");

const Web3 = require('web3');
const Keccak256 = require('js-sha3').keccak256;
const leftPad = require('left-pad');


//const w3 = new Web3(new Web3.providers.HttpProvider("http://138.201.80.44:5537")) // Hardcoded development port
const w3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545")) // Hardcoded development port

/*
var b = await getBalance(PLAYER);

console.log("ETH - ", (b - (await getBalance(PLAYER))));
console.log("USD - ", 600 * (b - (await getBalance(PLAYER))));
console.log("AMD - ", 600 * 480 * (b - (await getBalance(PLAYER))));
*/


const timeTravel = function (time) {

        return new Promise ((resolve, reject) => {
                web3.currentProvider.sendAsync({
                        jsonrpc: "2.0",
                        method: "evm_increaseTime",
                        params: [time], // 86400 is num seconds in day
                        id: new Date().getTime()
                }, (err, result) => {
                        if (err) {
                                return reject(err);
                        }
                        return resolve(result)
                });
        })
}


const mineBlock = function () {

        return new Promise ((resolve, reject) => {
                web3.currentProvider.sendAsync({
                        jsonrpc: "2.0",
                        method: "evm_mine"
                }, (err, result) => {
                        if (err) {
                                return reject(err);
                        }
                        return resolve(result);
                });
        });
}


contract('FastChannel', async (accounts) => {

        /// FastChannel
        let FASTCHANNEL;

        /// Token
        let FST;

        /// Owner address
        let OWNER = accounts[0];
        
        /// Player address
        let PLAYER = accounts[2];

        /// FastChannel State properties
        let CID = 0;
        var SEQUENCE = 0;


        async function isAccountLocked(account) {

                try {
                        await w3.eth.sendTransaction({
                                from: account,
                                to: account,
                                value: 0
                        });
                        return false;
                } catch (err) {
                        return (err.message == "authentication needed: password or unlock");
                }
        }

        async function unlockAccountsIfNeeded() {

                if (isAccountLocked(OWNER)) {
                        //console.log("Account OWNER - " + OWNER + " is locked. Unlocking");
                        await w3.eth.personal.unlockAccount(OWNER, "kalina", 300);
                }
                if (isAccountLocked(PLAYER)) {
                        //console.log("Account PLAYER - " + PLAYER + " is locked. Unlocking");
                        await w3.eth.personal.unlockAccount(PLAYER, "kalina86", 300);
                }
        }

        async function getBalance(a) {

                return web3.fromWei(await w3.eth.getBalance(a));
        }

        async function updateFastChannel(cid, sequence, balance, challengePeriod, updater) {

                unlockAccountsIfNeeded();
                let str = web3.toHex('updateChannelState').slice(2)
                        + leftPad((cid).toString(16), 64, 0)
                        + leftPad((sequence).toString(16), 64, 0)
                        + leftPad((balance).toString(16), 64, 0);
                var fingerprint = web3.sha3(str, { encoding: 'hex' });
                const signO = await w3.eth.sign(fingerprint, OWNER);
                const signP = await w3.eth.sign(fingerprint, PLAYER);
                let r = await FASTCHANNEL.updateChannelState(CID, SEQUENCE, balance, signO, signP, challengePeriod, { from:updater });
                assert(1 == r.logs.length);
                assert('channelUpdated' == r.logs[0].event);
                assert(CID == r.logs[0].args.channelId.toNumber());

                let c = await FASTCHANNEL.getChannel.call(CID);
                let i = 0;
                return { player: c[i++],
                                phase: c[i++].toNumber(),
                                startChallengeDate: c[i++].toNumber(),
                                challengePeriod: c[i++].toNumber(),
                                slotAddress: c[i++],
                                balance: c[i++].toNumber(),
                                sequenceNumber: c[i++].toNumber() };
        }

        before(async() => {

                unlockAccountsIfNeeded();
                FST = await Fasttoken.new(OWNER, { from: OWNER });
                await FST.transfer(PLAYER, 10000, { from: OWNER });
                FASTCHANNEL = await FastChannel.new(FST.address, { from: OWNER });
                await FST.transfer(FASTCHANNEL.address, 1000000, { from: OWNER });
        });

        describe("FastChannel initial parameters", async function () {

                it("Fasttoken", async function () {
                        let ftn = await FASTCHANNEL.token.call();
                        assert.equal(ftn, FST.address);
                });
        });

        describe("FastChannel", async function () {

                it("Should fail to freeze bank by other account", async function () {
                        try {
                                let twoHours = 2 * 3600;
                                await FASTCHANNEL.setFrozenPeriod(twoHours, { from: PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should freeze bank 2 hours", async function () {
                        let twoHours = 2 * 3600;
                        await FASTCHANNEL.setFrozenPeriod(twoHours, { from: OWNER });
                        let now = (await w3.eth.getBlock("latest")).timestamp;
                        assert.equal(now, (await FASTCHANNEL.bankFreezingDate.call()).toNumber());
                        assert.equal(twoHours, (await FASTCHANNEL.bankFrozenPeriod.call()).toNumber());
                });

                it("Should fail to create FastChannel, because bank is not frozen", async function () {
                        try {
                                let balance = 100;
                                unlockAccountsIfNeeded();
                                await FST.approve(FASTCHANNEL.address, balance, { from: PLAYER } );
                                await FASTCHANNEL.createChannel(SLOT.address, balance, { from: PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to extend bank freezing by other account", async function () {
                        try {
                                let day = 24 * 3600;
                                await FASTCHANNEL.extendFrozenPeriod(day, { from: PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should extend bank freezing 1 day", async function () {
                        let day = 24 * 3600;
                        let twoHours = 2 * 3600;
                        await FASTCHANNEL.extendFrozenPeriod(day, { from: OWNER });
                        let now = (await w3.eth.getBlock("latest")).timestamp;
                        assert.equal(now, (await FASTCHANNEL.bankFreezingDate.call()).toNumber());
                        assert.equal(day + twoHours, (await FASTCHANNEL.bankFrozenPeriod.call()).toNumber());
                });

                it("Should fail to lock by other account", async function () {
                        try {
                                await FASTCHANNEL.lock({ from:PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should lock FastChannel", async function () {
                        assert.equal(false, await FASTCHANNEL.isLocked.call());
                        await FASTCHANNEL.lock({ from:OWNER });
                        assert.equal(true, await FASTCHANNEL.isLocked.call());
                });

                it("Should fail to create FastChannel, because it is locked", async function () {
                        try {
                                let balance = 100;
                                unlockAccountsIfNeeded();
                                await FST.approve(FASTCHANNEL.address, balance, { from: PLAYER } );
                                await FASTCHANNEL.createChannel(SLOT.address, balance, { from: PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to unlock by other account", async function () {
                        try {
                                await FASTCHANNEL.unlock({ from:PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should unlock FastChannel", async function () {
                        assert.equal(true, await FASTCHANNEL.isLocked.call());
                        await FASTCHANNEL.unlock({ from:OWNER });
                        assert.equal(false, await FASTCHANNEL.isLocked.call());
                });

                it("Should create FastChannel", async function () {
                        unlockAccountsIfNeeded();
                        let balance = 100;
                        let bank = (await FST.balanceOf.call(FASTCHANNEL.address)).toNumber();
                        assert.equal(0, (await FASTCHANNEL.numberOfActiveChannels.call()).toNumber());

                        await FST.approve(FASTCHANNEL.address, balance, { from: PLAYER } );
                        let r = await FASTCHANNEL.createChannel(SLOT.address, balance, { from: PLAYER });
                        assert(1 == r.logs.length);
                        assert('channelCreated' == r.logs[0].event);
                        CID = r.logs[0].args.channelId;
                        assert(SLOT.address == r.logs[0].args.slotAddress);
                        assert(balance == r.logs[0].args.balance);

                        assert.equal(true, await FASTCHANNEL.isChannelExists.call(CID));
                        assert.equal(1, (await FASTCHANNEL.numberOfActiveChannels.call()).toNumber());
                        var i = 0;
                        let c = await FASTCHANNEL.getChannel.call(CID);
                        assert.equal(PLAYER, c[i++]);                                                   // player
                        assert.equal(0, c[i++].toNumber());                                             // phase
                        assert.equal(0, c[i++].toNumber());                                             // start challenge date
                        assert.equal(3600, c[i++].toNumber());                                          // challenge period
                        assert.equal(SLOT.address, c[i++]);                                             // slot id
                        assert.equal(balance, c[i++].toNumber());                                       // balance
                        assert.equal(0, c[i++].toNumber());                                             // sequence number

                        assert.equal(bank + balance, (await FST.balanceOf.call(FASTCHANNEL.address)).toNumber());
                        return true;
                });

                it("Should fail to freeze bank during active channel", async function () {
                        try {
                                let twoHours = 2 * 3600;
                                await FASTCHANNEL.setFrozenPeriod(twoHours, { from: OWNER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to update not existing FastChannel", async function () {
                        try {
                                let cid = CID + 1;
                                SEQUENCE = 10;
                                let b = 120;
                                await updateFastChannel(cid, SEQUENCE, b, true, OWNER);
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should update FastChannel", async function () {
                        let b = 120;
                        let c = await updateFastChannel(CID, SEQUENCE, b, false, OWNER);
                        assert.equal(0, c.phase);
                        assert.equal(b, c.balance);
                        assert.equal(SEQUENCE, c.sequenceNumber);
                        return true;
                });

                it("Should fail to update FastChannel with less sequence number", async function () {
                        try {
                                let b = 120;
                                let s = SEQUENCE - 5; // Less then 10
                                await updateFastChannel(CID, s, b, false, OWNER);
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to update FastChannel with the same sequence number", async function () {
                        try {
                                let b = 120;
                                await updateFastChannel(CID, SEQUENCE, b, false, OWNER);
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should change FastChannel to challenge period", async function () {
                        SEQUENCE += 2;
                        let b = 50;
                        let c = await updateFastChannel(CID, SEQUENCE, b, true, OWNER);
                        assert.equal(1, c.phase);
                        assert.equal(b, c.balance);
                        assert.equal(SEQUENCE, c.sequenceNumber);
                        return true;
                });

                it("Should update FastChannel in challenge period (Dispute)", async function () {
                        SEQUENCE += 2;
                        let b = 70;
                        let c = await updateFastChannel(CID, SEQUENCE, b, true, PLAYER);
                        assert.equal(1, c.phase);
                        assert.equal(b, c.balance);
                        assert.equal(SEQUENCE, c.sequenceNumber);
                        return true;
                });

                it("Should fail to update FastChannel from ChallengePeriod to Open", async function () {
                        try {
                                let s = SEQUENCE + 1;
                                let b = 120;
                                await updateFastChannel(CID, s, b, false, OWNER);
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to withdraw during active channel", async function () {
                        try {
                                await FASTCHANNEL.withdraw({ from:OWNER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to close FastChannel until end of challenge period", async function () {
                        try {
                                await FASTCHANNEL.closeChannel(CID, { from:OWNER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should close FastChannel", async function () {
                        await timeTravel(3600) // Move forward in time
                        await mineBlock() // workaround for https://github.com/ethereumjs/testrpc/issues/336

                        assert.equal(1, (await FASTCHANNEL.numberOfActiveChannels.call()).toNumber());
                        let b = (await FST.balanceOf.call(PLAYER)).toNumber();
                        let r = await FASTCHANNEL.closeChannel(CID, { from:OWNER });
                        assert(1 == r.logs.length);
                        assert('channelClosed' == r.logs[0].event);
                        assert(CID == r.logs[0].args.channelId.toNumber());

                        let c = await FASTCHANNEL.getChannel.call(CID);
                        assert.equal(2, c[1].toNumber()); // phase
                        assert.equal(0, (await FASTCHANNEL.numberOfActiveChannels.call()).toNumber());
                        assert.equal(b + c[5].toNumber(), (await FST.balanceOf.call(PLAYER)).toNumber());
                });

                it("Should fail to withdraw during freeze period", async function () {
                        try {
                                await FASTCHANNEL.withdraw({ from:OWNER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should fail to withdraw by other account", async function () {
                        await timeTravel(48 * 3600) // Move forward in time
                        await mineBlock() // workaround for https://github.com/ethereumjs/testrpc/issues/336
                        try {
                                await FASTCHANNEL.withdraw({ from:PLAYER });
                        } catch (error) {
                                return true;
                        }
                        throw new Error("I should never see this!");
                });

                it("Should withdraw", async function () {
                        let b = (await FST.balanceOf.call(OWNER)).toNumber();
                        let bank = (await FST.balanceOf.call(FASTCHANNEL.address)).toNumber();
                        await FASTCHANNEL.withdraw({ from:OWNER });
                        assert.equal(0, (await FST.balanceOf.call(FASTCHANNEL.address)).toNumber());
                        assert.equal(b + bank, (await FST.balanceOf.call(OWNER)).toNumber());
                });
        });
});

